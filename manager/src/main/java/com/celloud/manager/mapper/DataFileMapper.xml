<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.celloud.manager.mapper.DataFileMapper" >
  <resultMap id="BaseResultMap" type="com.celloud.manager.model.DataFile" >
    <id column="file_id" property="fileId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="data_key" property="dataKey" jdbcType="VARCHAR" />
    <result column="file_name" property="fileName" jdbcType="VARCHAR" />
    <result column="strain" property="strain" jdbcType="VARCHAR" />
    <result column="size" property="size" jdbcType="BIGINT" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="path" property="path" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="file_format" property="fileFormat" jdbcType="INTEGER" />
    <result column="sample" property="sample" jdbcType="VARCHAR" />
    <result column="another_name" property="anotherName" jdbcType="VARCHAR" />
    <result column="md5" property="md5" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.celloud.manager.model.DataFile" extends="BaseResultMap" >
    <result column="data_tags" property="dataTags" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    file_id, user_id, data_key, file_name, strain, size, create_date, update_date, path, 
    state, file_format, sample, another_name, md5
  </sql>
  <sql id="Blob_Column_List" >
    data_tags
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_file
    where file_id = #{fileId,jdbcType=INTEGER}
  </select>
  <select id="selectBySelective" resultMap="ResultMapWithBLOBs">
    SELECT
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    FROM tb_file
    <where>
        <if test="userId != null">
            AND user_id = #{userId}
        </if>
        <if test="dataKey != null">
            AND data_key = #{dataKey}
        </if>
        <if test="fileName != null">
            AND file_name = #{fileName}
        </if>
        <if test="strain != null">
            AND strain = #{strain}
        </if>
        <if test="size != null">
            AND size = #{size}
        </if>
        <if test="dataTags != null">
            AND data_tags = #{dataTags}
        </if>
        <if test="createDate != null">
            AND create_date = #{createDate}
        </if>
        <if test="updateDate != null">
            AND update_date = #{updateDate}
        </if>
        <if test="path != null">
            AND path = #{path}
        </if>
        <if test="state != null">
            AND state = #{state}
        </if>
        <if test="fileFormat != null">
            AND file_format = #{fileFormat}
        </if>
        <if test="sample != null">
            AND sample = #{sample}
        </if>
        <if test="anotherName != null">
            AND another_name = #{anotherName}
        </if>
        <if test="md5 != null">
            AND md5 = #{md5}
        </if>
    </where>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tb_file
    where file_id = #{fileId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.celloud.manager.model.DataFile" >
    insert into tb_file (file_id, user_id, data_key, 
      file_name, strain, size, 
      create_date, update_date, path, 
      state, file_format, sample, 
      another_name, md5, data_tags
      )
    values (#{fileId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{dataKey,jdbcType=VARCHAR}, 
      #{fileName,jdbcType=VARCHAR}, #{strain,jdbcType=VARCHAR}, #{size,jdbcType=BIGINT}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, #{path,jdbcType=VARCHAR}, 
      #{state,jdbcType=INTEGER}, #{fileFormat,jdbcType=INTEGER}, #{sample,jdbcType=VARCHAR}, 
      #{anotherName,jdbcType=VARCHAR}, #{md5,jdbcType=VARCHAR}, #{dataTags,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.celloud.manager.model.DataFile" >
    insert into tb_file
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="fileId != null" >
        file_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="dataKey != null" >
        data_key,
      </if>
      <if test="fileName != null" >
        file_name,
      </if>
      <if test="strain != null" >
        strain,
      </if>
      <if test="size != null" >
        size,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
      <if test="path != null" >
        path,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="fileFormat != null" >
        file_format,
      </if>
      <if test="sample != null" >
        sample,
      </if>
      <if test="anotherName != null" >
        another_name,
      </if>
      <if test="md5 != null" >
        md5,
      </if>
      <if test="dataTags != null" >
        data_tags,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="fileId != null" >
        #{fileId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="dataKey != null" >
        #{dataKey,jdbcType=VARCHAR},
      </if>
      <if test="fileName != null" >
        #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="strain != null" >
        #{strain,jdbcType=VARCHAR},
      </if>
      <if test="size != null" >
        #{size,jdbcType=BIGINT},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="path != null" >
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="fileFormat != null" >
        #{fileFormat,jdbcType=INTEGER},
      </if>
      <if test="sample != null" >
        #{sample,jdbcType=VARCHAR},
      </if>
      <if test="anotherName != null" >
        #{anotherName,jdbcType=VARCHAR},
      </if>
      <if test="md5 != null" >
        #{md5,jdbcType=VARCHAR},
      </if>
      <if test="dataTags != null" >
        #{dataTags,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.celloud.manager.model.DataFile" >
    update tb_file
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="dataKey != null" >
        data_key = #{dataKey,jdbcType=VARCHAR},
      </if>
      <if test="fileName != null" >
        file_name = #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="strain != null" >
        strain = #{strain,jdbcType=VARCHAR},
      </if>
      <if test="size != null" >
        size = #{size,jdbcType=BIGINT},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="path != null" >
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="fileFormat != null" >
        file_format = #{fileFormat,jdbcType=INTEGER},
      </if>
      <if test="sample != null" >
        sample = #{sample,jdbcType=VARCHAR},
      </if>
      <if test="anotherName != null" >
        another_name = #{anotherName,jdbcType=VARCHAR},
      </if>
      <if test="md5 != null" >
        md5 = #{md5,jdbcType=VARCHAR},
      </if>
      <if test="dataTags != null" >
        data_tags = #{dataTags,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.celloud.manager.model.DataFile" >
    update tb_file
    set user_id = #{userId,jdbcType=INTEGER},
      data_key = #{dataKey,jdbcType=VARCHAR},
      file_name = #{fileName,jdbcType=VARCHAR},
      strain = #{strain,jdbcType=VARCHAR},
      size = #{size,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      path = #{path,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      file_format = #{fileFormat,jdbcType=INTEGER},
      sample = #{sample,jdbcType=VARCHAR},
      another_name = #{anotherName,jdbcType=VARCHAR},
      md5 = #{md5,jdbcType=VARCHAR},
      data_tags = #{dataTags,jdbcType=LONGVARCHAR}
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.celloud.manager.model.DataFile" >
    update tb_file
    set user_id = #{userId,jdbcType=INTEGER},
      data_key = #{dataKey,jdbcType=VARCHAR},
      file_name = #{fileName,jdbcType=VARCHAR},
      strain = #{strain,jdbcType=VARCHAR},
      size = #{size,jdbcType=BIGINT},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      path = #{path,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      file_format = #{fileFormat,jdbcType=INTEGER},
      sample = #{sample,jdbcType=VARCHAR},
      another_name = #{anotherName,jdbcType=VARCHAR},
      md5 = #{md5,jdbcType=VARCHAR}
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>
  <select id="countDataFile" resultType="java.lang.Integer">
  select count(DISTINCT f.file_id) 
  from tb_user_company_relat ucr 
  LEFT JOIN tb_user u on u.user_id=ucr.user_id  
  LEFT JOIN tb_file f on u.user_id=f.user_id
  where u.state=#{state} and f.state=#{state}
  <if test="companyId!=null">
    and ucr.company_id=#{companyId}
  </if>
  <if test="testAccountIds!=null">
    and f.user_id not in(${testAccountIds }) 
    </if>
  </select>
  <select id="countDataFileSize" resultType="java.lang.Long">
  select sum(f.size) 
  from tb_user_company_relat ucr 
  LEFT JOIN tb_user u on u.user_id=ucr.user_id  
  LEFT JOIN tb_file f on u.user_id=f.user_id
  where u.state=#{state} and f.state=#{state}
  <if test="companyId!=null">
    and ucr.company_id=#{companyId}
  </if>
  <if test="testAccountIds!=null">
    and f.user_id not in(${testAccountIds }) 
    </if>
  </select>
  <select id="countDataFileByMonth" resultType="java.util.Map">
    select count(f.file_id) dataNum,c.company_name,date_format(f.create_date,'%Y-%m') time,c.company_id,sum(f.size) dataSize
	from tb_file f 
	LEFT JOIN tb_user u on f.user_id=u.user_id 
	LEFT JOIN tb_user_company_relat ucr on ucr.user_id=u.user_id
	INNER JOIN tb_company c on c.company_id=ucr.company_id
	where f.state=#{state}
	<if test="companyId!=null">
    and ucr.company_id=#{companyId}
    </if>
    <if test="testAccountIds!=null">
	and f.user_id not in(${testAccountIds }) 
	</if>
	GROUP BY time
	ORDER BY time ${order}
  </select>
  <select id="countDataFileOfMonth" resultType="java.util.Map">
    SELECT t.time,n.dataNum from(select DISTINCT date_format(f.create_date,'%Y-%m') time from tb_file f) t
    LEFT JOIN (
    select count(f.file_id) dataNum,c.company_name,date_format(f.create_date,'%Y-%m') time,c.company_id,sum(f.size) dataSize
    from tb_file f 
    LEFT JOIN tb_user u on f.user_id=u.user_id 
    LEFT JOIN tb_user_company_relat ucr on ucr.user_id=u.user_id
    INNER JOIN tb_company c on c.company_id=ucr.company_id
    where f.state=#{state}
    <if test="companyId!=null">
    and ucr.company_id=#{companyId}
    </if>
    <if test="testAccountIds!=null">
    and f.user_id not in(${testAccountIds }) 
    </if>
    GROUP BY time
    )n on t.time=n.time
    order by t.time
  </select>
  <select id="countDataFileByUser" resultType="java.util.Map">
  select count(f.file_id) dataNum,sum(f.size) dataSize,u.username,c.company_name
    from tb_file f 
    LEFT JOIN tb_user u on f.user_id=u.user_id 
    LEFT JOIN tb_user_company_relat ucr on ucr.user_id=u.user_id
    INNER JOIN tb_company c on c.company_id=u.company_id
    where f.state=#{state}
    
    <if test="companyId!=null">
    and ucr.company_id=#{companyId}
    </if>
    <if test="testAccountIds!=null">
    and f.user_id not in(${testAccountIds }) 
    </if>
    
    GROUP BY f.user_id
    ORDER BY dataNum desc
  </select>
  <select id="countDataFileByCompany" resultType="java.util.Map">
  select count(f.file_id) dataNum,sum(f.size) dataSize,c.company_name companyName,c.address,c.tel,c.create_date createDate
    from tb_file f 
    LEFT JOIN tb_user u on f.user_id=u.user_id 
    LEFT JOIN tb_user_company_relat ucr on ucr.user_id=u.user_id
    INNER JOIN tb_company c on c.company_id=u.company_id
    where f.state=#{state} and u.state=#{state}
    <if test="companyId!=null">
    and ucr.company_id=#{companyId}
    </if>
    <if test="testAccountIds!=null">
    and f.user_id not in(${testAccountIds }) 
    </if>
    GROUP BY c.company_id
    ORDER BY dataNum desc
  </select>
  <select id="countBigCustomerDataFile" resultType="java.util.Map">
  select count(f.file_id) dataNum,sum(f.size) dataSize,c.company_name companyName,c.company_id companyId
    from tb_file f 
    LEFT JOIN tb_user u on f.user_id=u.user_id 
    LEFT JOIN tb_user_company_relat ucr on ucr.user_id=f.user_id
    INNER JOIN tb_company c on c.company_id=ucr.company_id
    where f.state=#{state} and c.state=#{state} and u.state=#{state}
    <if test="testAccountIds!=null">
    and f.user_id not in(${testAccountIds }) 
    </if>
    GROUP BY ucr.company_id
    ORDER BY dataNum desc
  </select>
   <select id="countDataFileByBigCustomer" resultType="java.util.Map">
  select count(f.file_id) dataNum,sum(f.size) dataSize,ucr.company_id companyId
    from tb_file f 
    LEFT JOIN tb_user u on f.user_id=u.user_id 
    LEFT JOIN tb_user_company_relat ucr on ucr.user_id=u.user_id
    where f.state=#{state} and u.state=#{state}
    <if test="testAccountIds!=null">
    and f.user_id not in(${testAccountIds }) 
    </if>
    GROUP BY ucr.company_id
  </select>
  <select id="getExportData" resultType="java.util.Map">
  select u.user_id,u.username,f.data_key,f.file_name,f.create_date,f.path,app.app_name from tb_file f
	LEFT JOIN tb_user u on f.user_id=u.user_id
	LEFT JOIN tb_report r on f.file_id=r.file_id
	LEFT JOIN tb_app app on r.app_id=app.app_id
	where f.user_id in (${userIds} ) 
	<if test="start!=null and end!=null">
	and f.create_date between #{start} and #{end}
	</if>
  </select>
  <select id="getWeekUserLogin" resultType="java.util.HashMap">
    select u.username,count(u.username) log_count from
    (select date_format(date_sub(now(),interval WEEKDAY(now()) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(now(),interval WEEKDAY(now()) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date) temp, tb_user u, tb_log l<if test="companyId!=0">, tb_user_company_relat ucr</if>
    where u.role = 0
    and u.user_id = l.user_id
    and l.log_date &gt;= start_date
    and l.log_date &lt;= end_date
    and u.user_id not in (${testAccountIds})
    <if test="companyId!=0">and u.user_id = ucr.user_id and ucr.company_id = #{companyId}</if>
    group by u.username 
    order by log_count desc
    limit 10
  </select>
  <select id="getWeekAppRun" resultType="java.util.HashMap">
    select a.app_name,count(a.app_name) app_count
    from tb_report r,tb_user u,tb_app a,(select date_format(date_sub(now(),interval WEEKDAY(now()) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(now(),interval WEEKDAY(now()) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date) temp<if test="companyId!=0">, tb_user_company_relat ucr</if> 
    where u.role = 0
    and r.create_date &gt;= temp.start_date
    and r.create_date &lt;= temp.end_date
    and r.user_id = u.user_id
    and r.app_id = a.app_id
    and r.flag = 0 and u.user_id not in(${testAccountIds})
    <if test="companyId!=0">and u.user_id = ucr.user_id and ucr.company_id = #{companyId}</if>
    group by a.app_name
    order by app_count desc
    limit 10
  </select>
  <select id="getWeekDataSize" resultType="java.util.HashMap">
    select u.username,sum(f.size) size_sum,count(f.file_id) file_count
    from tb_file f,tb_user u,(select date_format(date_sub(now(),interval WEEKDAY(now()) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(now(),interval WEEKDAY(now()) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date) temp<if test="companyId!=0">, tb_user_company_relat ucr</if>
    where u.role = 0
    and f.create_date &gt;= temp.start_date
    and f.create_date &lt;= temp.end_date
    and f.user_id = u.user_id
    and u.user_id not in(${testAccountIds})
    <if test="companyId!=0">and u.user_id = ucr.user_id and ucr.company_id = #{companyId}</if>
    group by u.user_id
    order by size_sum desc
    limit 10
  </select>
  <select id="getHistoryWeekUserLogin" resultType="java.util.HashMap">
    select count(log_date) log_count,date_format(date_sub(l.log_date,interval WEEKDAY(l.log_date) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(l.log_date,interval WEEKDAY(l.log_date) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date 
    from tb_log l<if test="companyId!=0">, tb_user_company_relat ucr, tb_user u</if>
    <where>
    <if test="companyId!=0">
    and l.user_id = ucr.user_id and ucr.company_id = #{companyId}
    and l.user_id = u.user_id
    and u.role = 0
    </if>
    and l.user_id not in(${testAccountIds})
    </where>
    group by start_date 
    order by start_date desc
  </select>
  <select id="getHistoryWeekActiveUser" resultType="java.util.HashMap">
    select count(distinct l.user_id) active_user,date_format(date_sub(l.log_date,interval WEEKDAY(l.log_date) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(l.log_date,interval WEEKDAY(l.log_date) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date 
    from tb_log l<if test="companyId!=0">, tb_user_company_relat ucr, tb_user u</if>
    <where>
    <if test="companyId!=0">
    and l.user_id = ucr.user_id and ucr.company_id = #{companyId}
    and l.user_id = u.user_id
    and u.role = 0
    </if>
    and l.user_id not in(${testAccountIds}) 
    </where>
    group by start_date 
    order by start_date desc
  </select>
  <select id="getHistoryWeekAppRun" resultType="java.util.HashMap">
    select count(a.app_name) run_app, date_format(date_sub(r.create_date,interval WEEKDAY(r.create_date) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(r.create_date,interval WEEKDAY(r.create_date) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date 
    from tb_report r,tb_app a<if test="companyId!=0">, tb_user_company_relat ucr, tb_user u</if>
    where r.app_id = a.app_id
    and r.create_date is not null
    and r.flag = 0
    <if test="companyId!=0">
    and r.user_id = ucr.user_id and ucr.company_id = #{companyId}
    and r.user_id = u.user_id
    and u.role = 0
    </if>
    and r.user_id not in(${testAccountIds}) 
    group by start_date 
    order by start_date desc
  </select>
  <select id="getHistoryWeekAppActive" resultType="java.util.HashMap">
    select count(distinct a.app_name) active_app, date_format(date_sub(r.create_date,interval WEEKDAY(r.create_date) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(r.create_date,interval WEEKDAY(r.create_date) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date 
    from tb_report r, tb_app a<if test="companyId!=0">, tb_user_company_relat ucr, tb_user u</if> 
    where r.app_id = a.app_id
    and r.create_date is not null
    and r.flag = 0
    <if test="companyId!=0">
    and r.user_id = ucr.user_id and ucr.company_id = #{companyId}
    and r.user_id = u.user_id
    and u.role = 0
    </if>
    and r.user_id not in(${testAccountIds}) 
    group by start_date
    order by start_date desc
  </select>
  <select id="getHistoryWeekDataSize" resultType="java.util.HashMap">
    select count(f.file_id) file_count, sum(f.size) size_sum,date_format(date_sub(f.create_date,interval WEEKDAY(f.create_date) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(f.create_date,interval WEEKDAY(f.create_date) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date
    from tb_file f<if test="companyId!=0">, tb_user_company_relat ucr, tb_user u</if>
    <where>
    <if test="companyId!=0">
    and f.user_id = ucr.user_id and ucr.company_id = #{companyId}
    and f.user_id = u.user_id
    and u.role = 0
    </if>
    and f.user_id not in(${testAccountIds}) 
    </where>
    group by start_date
    order by start_date desc
  </select>
  <select id="getMd5FileIdMap" resultType="java.util.Map">
        SELECT file_id fileId, `md5` `md5`
        FROM tb_file
        WHERE file_id in(
            SELECT file_id
            FROM tb_report
            WHERE app_id = #{appId}
            <if test="userIds != null">
            AND user_id in
            <foreach collection="userIds" item="userId" separator="," open="(" close=")">
                #{userId}
            </foreach>
            </if>
            AND flag = 0
            AND period = 3
        )
    </select>
</mapper>