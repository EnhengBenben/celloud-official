<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.celloud.manager.mapper.UserMapper">
	<resultMap id="BaseResultMap" type="com.celloud.manager.model.User">
		<id column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="username" property="username" jdbcType="VARCHAR" />
		<result column="password" property="password" jdbcType="VARCHAR" />
		<result column="email" property="email" jdbcType="VARCHAR" />
		<result column="cellphone" property="cellphone" jdbcType="VARCHAR" />
		<result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
		<result column="icon" property="icon" jdbcType="VARCHAR" />
		<result column="role" property="role" jdbcType="INTEGER" />
		<result column="remark" property="remark" jdbcType="VARCHAR" />
		<result column="navigation" property="navigation" jdbcType="INTEGER" />
		<result column="truename" property="truename" jdbcType="VARCHAR" />
		<result column="state" property="state" jdbcType="INTEGER" />
		<result column="dept_id" property="deptId" jdbcType="INTEGER" />
		<result column="login_uuid" property="loginUuid" jdbcType="VARCHAR" />
		<result column="company_id" property="companyId" jdbcType="INTEGER" />
		<result column="sign" property="sign" jdbcType="VARCHAR" />
		<result column="balances" property="balances" jdbcType="DECIMAL" />
	</resultMap>
	<sql id="Base_Column_List">
		user_id, username, email, cellphone, create_date,
		icon,
		role,
		remark, navigation,
		truename, state, dept_id, login_uuid,
		company_id, sign,balances
	</sql>
	<update id="updateByPrimaryKeySelective" parameterType="com.celloud.manager.model.User">
        update tb_user
        <set>
            <if test="username != null">
                username = #{username,jdbcType=VARCHAR},
            </if>
            <if test="password != null">
                password = #{password,jdbcType=VARCHAR},
            </if>
            <if test="email != null">
                email = #{email,jdbcType=VARCHAR},
            </if>
            <if test="cellphone != null">
                cellphone = #{cellphone,jdbcType=VARCHAR},
            </if>
            <if test="createDate != null">
                create_date = #{createDate,jdbcType=TIMESTAMP},
            </if>
            <if test="icon != null">
                icon = #{icon,jdbcType=VARCHAR},
            </if>
            <if test="role != null">
                role = #{role,jdbcType=INTEGER},
            </if>
            <if test="remark != null">
                remark = #{remark,jdbcType=VARCHAR},
            </if>
            <if test="navigation != null">
                navigation = #{navigation,jdbcType=INTEGER},
            </if>
            <if test="truename != null">
                truename = #{truename,jdbcType=VARCHAR},
            </if>
            <if test="state != null">
                state = #{state,jdbcType=INTEGER},
            </if>
            <if test="deptId != null">
                dept_id = #{deptId,jdbcType=INTEGER},
            </if>
            <if test="loginUuid != null">
                login_uuid = #{loginUuid,jdbcType=VARCHAR},
            </if>
            <if test="companyId != null">
                company_id = #{companyId,jdbcType=INTEGER},
            </if>
            <if test="sign != null">
                sign = #{sign,jdbcType=VARCHAR},
            </if>
            <if test="balances != null">
				balances = #{balances,jdbcType=DECIMAL},
			</if>
        </set>
        where user_id = #{userId,jdbcType=INTEGER}
    </update>
	<select id="checkLogin" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from tb_user
        where state = 0
        AND  (
              username = #{username,jdbcType=VARCHAR}
              OR email = #{username,jdbcType=VARCHAR}
              )
        AND password = #{password,jdbcType=VARCHAR}
        AND (role=1 or role=2)
    </select>
    <select id="countUser" resultType="java.lang.Integer">
        select count(DISTINCT ucr.user_id) 
        from tb_user_company_relat ucr LEFT JOIN tb_user u on u.user_id=ucr.user_id 
        where u.state=#{state}
        <if test="companyId != null">
        and ucr.company_id=#{companyId}
        </if>
        <if test="testAccountIds != null">
        and ucr.user_id not in(${testAccountIds})
        </if>
    </select>
    <select id="countCompany" resultType="java.lang.Integer">
        select count(DISTINCT u.company_id) 
        from tb_user_company_relat ucr 
        LEFT JOIN tb_user u on u.user_id=ucr.user_id 
        where u.state=#{state}
        <if test="companyId != null">
        and ucr.company_id=#{companyId}
        </if>
        <if test="testAccountIds != null">
        and ucr.user_id not in(${testAccountIds})
        </if>
    </select>
    <select id="countCompanyByProvince" resultType="java.util.Map">
        select count(DISTINCT u.company_id) `value`,c.province `name`
		from tb_user_company_relat ucr 
		LEFT JOIN tb_user u on u.user_id=ucr.user_id  
		LEFT JOIN tb_company c on u.company_id=c.company_id
		where u.state=#{state} and not ISNULL(c.province) and c.state=#{state}
        <if test="companyId != null">
        and ucr.company_id=#{companyId}
        </if>
        <if test="testAccountIds != null">
        and ucr.user_id not in(${testAccountIds})
        </if>
		GROUP BY c.province
    </select>
    <select id="countLogin" resultType="java.util.Map">
        select count(l.user_id) logNum, a.username user_name from tb_log l 
        INNER JOIN ( select DISTINCT ucr.user_id,u.username
        from tb_user_company_relat ucr LEFT JOIN tb_user u on u.user_id=ucr.user_id
        where u.state=#{state}
        <if test="companyId != null">
        and ucr.company_id=#{companyId}
        </if>
        <if test="testAccountIds != null">
        and ucr.user_id not in(${testAccountIds})
        </if>) a on l.user_id=a.user_id 
		where l.operate='登录' or l.operate='用户登录' 
		GROUP BY l.user_id 
		ORDER BY logNum desc 
		LIMIT 0,20
    </select>
    <select id="getUserNumOfMon" resultType="java.util.Map">
		SELECT t.time,n.userNum from (SELECT DISTINCT date_format(usr.create_date,'%Y-%m') time from tb_user usr ) t
        LEFT  JOIN (
        SELECT count(u.user_id) userNum,date_format(u.create_date,'%Y-%m') time from tb_user_company_relat ucr 
        LEFT JOIN tb_user u on u.user_id=ucr.user_id
        where u.state=#{state} 
        <if test="companyId != null">
        and ucr.company_id=#{companyId}
        </if>
        <if test="testAccountIds != null">
        and ucr.user_id not in(${testAccountIds})
        </if>
        
        GROUP BY time
        ) n on t.time=n.time
        ORDER BY time;
    </select>
    
    <select id="getUserNumCount" resultType="java.util.Map">
        select count(DISTINCT ucr.user_id) userNum,ucr.company_id companyId
        from tb_user_company_relat ucr LEFT JOIN tb_user u on u.user_id=ucr.user_id
                LEFT JOIN tb_company c on c.company_id=ucr.company_id
        where u.state=#{state}  and c.state=#{state} 
        <if test="testAccountIds != null">
        and ucr.user_id not in(${testAccountIds})
        </if>
        GROUP BY ucr.company_id
    </select>
    <select id="findUserByBigCustomer" resultMap="BaseResultMap">
    select DISTINCT u.user_id,u.username from tb_user_company_relat ucr
	INNER JOIN tb_user u on ucr.user_id=u.user_id
	where u.state=#{state } and role != 1
	<if test="companyId != null">
    and ucr.company_id=#{companyId}
    </if>
	<if test="testAccountIds != null">
    and ucr.user_id not in(${testAccountIds})
    </if>
    </select>
    <select id="getUserByEmail" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from tb_user
        where state = 0
        AND email = #{email,jdbcType=VARCHAR}
    </select>
    <insert id="insertFindPwdInfo">
        insert into tb_user_find_pwd (user_id, expire_date,
        md5)
        values (#{userId,jdbcType=INTEGER},
        #{expireDate,jdbcType=TIMESTAMP},
        #{randomCode,jdbcType=VARCHAR})
    </insert>
    <delete id="cleanFindPwdByUserId">
        delete from tb_user_find_pwd
        where
        user_id=#{userId,jdbcType=INTEGER}
        OR expire_date &lt;=
        #{expireDate,jdbcType=TIMESTAMP}
    </delete>
    <delete id="cleanFindPwdByUsername">
        delete from tb_user_find_pwd
        where
        <if test="username != null">
            user_id=(
            select
            user_id from tb_user where
            username=#{username,jdbcType=VARCHAR}
            ) OR
        </if>
        expire_date &lt;= #{expireDate,jdbcType=TIMESTAMP}
    </delete>
    <select id="getUserByFindPwd" resultMap="BaseResultMap">
        select
        tb_user.*
        from
        tb_user,tb_user_find_pwd
        where tb_user.state = 0
        AND
        tb_user.username =
        #{username,jdbcType=VARCHAR}
        AND
        tb_user.user_id=tb_user_find_pwd.user_id
        AND
        tb_user_find_pwd.md5=#{randomCode,jdbcType=VARCHAR}
    </select>
    <select id="getUserByName" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from tb_user
        where username = #{username}
    </select>
    <select id="isEmailInUse" resultType="int">
        select count(1) from tb_user where email=#{email} and user_id != #{userId}
    </select>
    <select id="isUsernameInUse" resultType="int">
        select count(1) from tb_user where username=#{username } and user_id != #{userId}
    </select>
    <select id="getCompanyIdByUserId" resultType="java.lang.Integer">
        select company_id from tb_user_company_relat where user_id = #{userId}
    </select>
    <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer">
		select
		user_id, username, email, cellphone, create_date,
		role,
		remark, navigation,
		truename, state, dept_id,
		login_uuid,
		company_id, sign,balances
		from tb_user
		where user_id = #{userId,jdbcType=INTEGER}
	</select>
    <select id="getUserByPage" resultType="java.util.HashMap">
        select
        u.user_id as userId, username, email, cellphone, u.create_date as createDate,
        icon,
        role,
        remark, navigation,
        truename, u.state, u.dept_id as deptId, login_uuid as loginUuid,
        u.company_id as companyId, sign, c.company_name as companyName
        from tb_user u, tb_company c
        <if test="companyId != 0">
        , tb_user_company_relat ucr
        </if>
        where
        u.company_id = c.company_id and
        u.state=#{state }
        <if test="companyId != 0">
         and role = 0 and u.user_id = ucr.user_id and ucr.company_id = #{companyId } and u.user_id not in (${testAccountIds})
        </if>
        <if test="keyword!=null and keyword!=''">
            and ${searchField} like '%${keyword }%'
        </if>
        <if test="companyId == 0">
         and (role = 0 or role = 1)
        </if>
        order by u.create_date desc
    </select>
    <insert id="addUser" useGeneratedKeys="true" keyProperty="userId" parameterType="com.celloud.manager.model.User" >
        insert into tb_user (
        username, password,
        email, cellphone, create_date,
        icon, role, remark,
         truename, state,
        dept_id, login_uuid, company_id,
        sign)
        values (#{username,jdbcType=VARCHAR},
        #{password,jdbcType=VARCHAR},
        #{email,jdbcType=VARCHAR},
        #{cellphone,jdbcType=VARCHAR},now(),
        #{icon,jdbcType=VARCHAR}, #{role,jdbcType=INTEGER},
        #{remark,jdbcType=VARCHAR},
        #{truename,jdbcType=VARCHAR}, #{state,jdbcType=INTEGER},
        #{deptId,jdbcType=INTEGER}, #{loginUuid,jdbcType=VARCHAR},
        #{companyId,jdbcType=INTEGER},
        #{sign,jdbcType=VARCHAR})
    </insert>
    <insert id="addUserAppRight"  useGeneratedKeys="true">
         <selectKey resultType="long" keyProperty="id" order="AFTER">  
            SELECT  
            LAST_INSERT_ID()  
        </selectKey>  
        insert into tb_user_app_right (
        user_id, app_id,
        is_add)
        values
        <foreach collection="appIds" item="appId" index="index" separator="," >
            (#{userId},${appId},#{isAdded})
        </foreach>
    </insert>
    <insert id="addUserRoleRight" useGeneratedKeys="true">
        insert into 
        tb_sec_user_role_relat (
        user_id, role_id)
        values
        <foreach collection="roleIds" item="roleId" separator=",">
            (#{userId}, #{roleId})
        </foreach>
    </insert>
    <insert id="addUserCompanyRelat">
        insert into tb_user_company_relat (
        user_id, company_id)
        values
        (#{userId},#{companyId})
    </insert>
    <select id="getAllUserList" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from tb_user
        where state=#{state }
        order by username
    </select>
    <select id="getAllUserSelectList" resultType="com.celloud.manager.model.UserSelect">
        select 
        email as id, username as text 
        from tb_user 
        where state = #{state } 
        order by username
    </select>
    <select id="getAppListByUserId" parameterType="java.lang.Integer" resultType="java.util.HashMap">
        select
        id as id, user_id as userId, app_id as appId, is_add as isAdd
        from tb_user_app_right
        where
        user_id = #{id}
    </select>
    <insert id="grantUserApp">
        insert into tb_user_app_right (
        user_id, app_id,
        is_add)
        values
        <foreach collection="appAddList" item="appAdd" index="index" separator="," >
            (#{userId},#{appAdd.appId},#{appAdd.isAdd})
        </foreach> 
    </insert>
    <select id="findUsersByIds" parameterType="java.util.List" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM tb_user
        WHERE user_id
        IN
        <foreach collection="userIds" item="userId" separator="," open="(" close=")">
        #{userId}
        </foreach>
    </select>
</mapper>
