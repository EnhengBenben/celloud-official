<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.celloud.mapper.DataFileMapper" >
  <resultMap id="BaseResultMap" type="com.celloud.model.DataFile" >
    <id column="file_id" property="fileId" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="data_key" property="dataKey" jdbcType="VARCHAR" />
    <result column="file_name" property="fileName" jdbcType="VARCHAR" />
    <result column="strain" property="strain" jdbcType="VARCHAR" />
    <result column="size" property="size" jdbcType="DOUBLE" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="path" property="path" jdbcType="VARCHAR" />
    <result column="state" property="state" jdbcType="INTEGER" />
    <result column="file_format" property="fileFormat" jdbcType="INTEGER" />
    <result column="sample" property="sample" jdbcType="VARCHAR" />
    <result column="another_name" property="anotherName" jdbcType="VARCHAR" />
    <result column="md5" property="md5" jdbcType="VARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.celloud.model.DataFile" extends="BaseResultMap" >
    <result column="data_tags" property="dataTags" jdbcType="LONGVARCHAR" />
  </resultMap>
  <resultMap id="ResultMapWithRunState" type="com.celloud.model.DataFile" extends="ResultMapWithBLOBs" >
    <result column="isRunning" property="isRunning" jdbcType="INTEGER" />
    <result column="reportNum" property="reportNum" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    file_id, user_id, data_key, file_name, strain, size, create_date, update_date, path, 
    state, file_format, sample, another_name, md5
  </sql>
  <sql id="Blob_Column_List" >
    data_tags
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_file
    where file_id = #{fileId,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tb_file
    where file_id = #{fileId,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.celloud.model.DataFile" >
    insert into tb_file (file_id, user_id, data_key, 
      file_name, strain, size, 
      create_date, update_date, path, 
      state, file_format, sample, 
      another_name, md5, data_tags
      )
    values (#{fileId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{dataKey,jdbcType=VARCHAR}, 
      #{fileName,jdbcType=VARCHAR}, #{strain,jdbcType=VARCHAR}, #{size,jdbcType=DOUBLE}, 
      #{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP}, #{path,jdbcType=VARCHAR}, 
      #{state,jdbcType=INTEGER}, #{fileFormat,jdbcType=INTEGER}, #{sample,jdbcType=VARCHAR}, 
      #{anotherName,jdbcType=VARCHAR}, #{md5,jdbcType=VARCHAR}, #{dataTags,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.celloud.model.DataFile" >
    insert into tb_file
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="fileId != null" >
        file_id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="dataKey != null" >
        data_key,
      </if>
      <if test="fileName != null" >
        file_name,
      </if>
      <if test="strain != null" >
        strain,
      </if>
      <if test="size != null" >
        size,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="updateDate != null" >
        update_date,
      </if>
      <if test="path != null" >
        path,
      </if>
      <if test="state != null" >
        state,
      </if>
      <if test="fileFormat != null" >
        file_format,
      </if>
      <if test="sample != null" >
        sample,
      </if>
      <if test="anotherName != null" >
        another_name,
      </if>
      <if test="md5 != null" >
        md5,
      </if>
      <if test="dataTags != null" >
        data_tags,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="fileId != null" >
        #{fileId,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="dataKey != null" >
        #{dataKey,jdbcType=VARCHAR},
      </if>
      <if test="fileName != null" >
        #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="strain != null" >
        #{strain,jdbcType=VARCHAR},
      </if>
      <if test="size != null" >
        #{size,jdbcType=DOUBLE},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="path != null" >
        #{path,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        #{state,jdbcType=INTEGER},
      </if>
      <if test="fileFormat != null" >
        #{fileFormat,jdbcType=INTEGER},
      </if>
      <if test="sample != null" >
        #{sample,jdbcType=VARCHAR},
      </if>
      <if test="anotherName != null" >
        #{anotherName,jdbcType=VARCHAR},
      </if>
      <if test="md5 != null" >
        #{md5,jdbcType=VARCHAR},
      </if>
      <if test="dataTags != null" >
        #{dataTags,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.celloud.model.DataFile" >
    update tb_file
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="dataKey != null" >
        data_key = #{dataKey,jdbcType=VARCHAR},
      </if>
      <if test="fileName != null" >
        file_name = #{fileName,jdbcType=VARCHAR},
      </if>
      <if test="strain != null" >
        strain = #{strain,jdbcType=VARCHAR},
      </if>
      <if test="size != null" >
        size = #{size,jdbcType=DOUBLE},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        update_date = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="path != null" >
        path = #{path,jdbcType=VARCHAR},
      </if>
      <if test="state != null" >
        state = #{state,jdbcType=INTEGER},
      </if>
      <if test="fileFormat != null" >
        file_format = #{fileFormat,jdbcType=INTEGER},
      </if>
      <if test="sample != null" >
        sample = #{sample,jdbcType=VARCHAR},
      </if>
      <if test="anotherName != null" >
        another_name = #{anotherName,jdbcType=VARCHAR},
      </if>
      <if test="md5 != null" >
        md5 = #{md5,jdbcType=VARCHAR},
      </if>
      <if test="dataTags != null" >
        data_tags = #{dataTags,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.celloud.model.DataFile" >
    update tb_file
    set user_id = #{userId,jdbcType=INTEGER},
      data_key = #{dataKey,jdbcType=VARCHAR},
      file_name = #{fileName,jdbcType=VARCHAR},
      strain = #{strain,jdbcType=VARCHAR},
      size = #{size,jdbcType=DOUBLE},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      path = #{path,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      file_format = #{fileFormat,jdbcType=INTEGER},
      sample = #{sample,jdbcType=VARCHAR},
      another_name = #{anotherName,jdbcType=VARCHAR},
      md5 = #{md5,jdbcType=VARCHAR},
      data_tags = #{dataTags,jdbcType=LONGVARCHAR}
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.celloud.model.DataFile" >
    update tb_file
    set user_id = #{userId,jdbcType=INTEGER},
      data_key = #{dataKey,jdbcType=VARCHAR},
      file_name = #{fileName,jdbcType=VARCHAR},
      strain = #{strain,jdbcType=VARCHAR},
      size = #{size,jdbcType=DOUBLE},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      update_date = #{updateDate,jdbcType=TIMESTAMP},
      path = #{path,jdbcType=VARCHAR},
      state = #{state,jdbcType=INTEGER},
      file_format = #{fileFormat,jdbcType=INTEGER},
      sample = #{sample,jdbcType=VARCHAR},
      another_name = #{anotherName,jdbcType=VARCHAR},
      md5 = #{md5,jdbcType=VARCHAR}
    where file_id = #{fileId,jdbcType=INTEGER}
  </update>
  <select id="countData" resultType="java.lang.Integer">
    select count(*) size from tb_file where user_id = #{userId } and state = #{state }
  </select>
  <select id="countDataByTime" resultType="map">
    select left(create_date,#{time }) time,count(file_id) num from tb_file where user_id = #{userId } and state = #{state } group by time
  </select>
  <select id="sumData" resultType="java.lang.Long">
   select sum(size) size from tb_file where user_id = #{userId } and state = #{state }
  </select>
  <select id="sumDataByTime" resultType="map">
   select left(create_date,#{time }) time,sum(size) size from tb_file where user_id = #{userId } and state = #{state } group by time
  </select>
  <insert id="addDataInfo" parameterType="com.celloud.model.DataFile" >
    insert into tb_file(user_id,file_name,create_date,md5,state) values(#{userId },#{fileName },now(),#{md5 },#{state})
  </insert>
  <update id="updateDataInfoByFileId" parameterType="com.celloud.model.DataFile" >
    update tb_file set data_key=#{dataKey },size=#{size },path=#{path },another_name=#{anotherName },file_format=#{fileFormat },state=#{state } where file_id=#{fileId }
  </update>
  <select id="findAllDataLists" resultMap="ResultMapWithRunState" parameterType="java.lang.Integer">
    select
    <include refid="Base_Column_List" />
	,
	<include refid="Blob_Column_List" />
	,
	(select count(*) reportNum from tb_report r where r.period = #{period } and r.flag = #{reportType } and r.state = #{state } and r.file_id=f.file_id) reportNum,
    (select count(*) isRunning from tb_report r where r.period != #{period } and r.flag = #{reportType } and r.state = #{state } and r.file_id=f.file_id) isRunning
    from tb_file f
    where user_id = #{userId } and state = #{state }
    order by f.create_date desc,f.file_name asc
  </select>
  <select id="findDataLists" resultMap="ResultMapWithRunState" >
    select
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    ,
    (select count(*) reportNum from tb_report r where r.period = #{period } and r.flag = #{reportType } and r.state = #{state } and r.file_id=f.file_id) reportNum,
    (select count(*) isRunning from tb_report r where r.period != #{period } and r.flag = #{reportType } and r.state = #{state } and r.file_id=f.file_id) isRunning
    from tb_file f
    where user_id = #{userId } and state = #{state }
    <if test="condition != ''" >
        and (data_key like CONCAT('%',#{condition},'%' ) 
        or file_name like CONCAT('%',#{condition},'%' ) 
        or another_name like CONCAT('%',#{condition},'%' ) 
        or data_tags like CONCAT('%',#{condition},'%' ))
    </if>
    <choose>
      <when test="sort == 0">
        order by date(f.create_date) ${sortDateType},f.file_name ${sortNameType}
      </when>
      <otherwise>
	    order by f.file_name ${sortNameType},date(f.create_date) ${sortDateType}
      </otherwise>
    </choose>
  </select>
</mapper>