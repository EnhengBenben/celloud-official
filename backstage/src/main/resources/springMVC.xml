<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
         http://www.springframework.org/schema/tx  http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
         http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
        http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd">
	<!--主动扫描Controller的配置，使得控制器能够扫描到相关的类 -->
	<context:component-scan base-package="com.celloud" />
	<mvc:annotation-driven />
	<!--避免IE执行AJAX时，返回JSON出现下载文件 -->
	<bean id="mappingJacksonHttpMessageConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/html;charset=UTF-8</value>
			</list>
		</property>
	</bean>

	<mvc:resources mapping="/js/**" location="/resources/js/" />
	<mvc:resources mapping="/css/**" location="/resources/css/" />
	<mvc:resources mapping="/images/**" location="/resources/img/" />
	<mvc:resources mapping="/plugins/**" location="/resources/plugins/" />
	<mvc:resources mapping="/resources/**" location="/resources/" />
	<!--配置一个返回视图用的bean，下面的这个class整合了jstl技术 -->
	<bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/pages/" />
		<property name="suffix" value=".jsp" />
	</bean>
	<!-- 引入配置文件 -->
	<bean id="propertyConfigurer"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:jdbc.properties</value>
				<value>classpath:mongodb.properties</value>
				<value>classpath:email.properties</value>
				<value>classpath:wechat.properties</value>
			</list>
		</property>
	</bean>

	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${driver}" />
		<property name="url" value="${url}" />
		<property name="username" value="${username}" />
		<property name="password" value="${password}" />
		<!-- 初始化连接大小 -->
		<property name="initialSize" value="${initialSize}" />
		<!-- 连接池最大数量 -->
		<property name="maxActive" value="${maxActive}" />
		<!-- 连接池最大空闲 -->
		<property name="maxIdle" value="${maxIdle}" />
		<!-- 连接池最小空闲 -->
		<property name="minIdle" value="${minIdle}" />
		<!-- 获取连接最大等待时间 -->
		<property name="maxWait" value="${maxWait}" />
		<property name="testWhileIdle" value="${testWhileIdle}" />
		<property name="testOnBorrow" value="${testOnBorrow}" />
		<property name="testOnReturn" value="${testOnReturn}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="removeAbandoned" value="${removeAbandoned}" />
		<property name="removeAbandonedTimeout" value="${removeAbandonedTimeout}" />
		<property name="logAbandoned" value="${logAbandoned}" />
	</bean>
	<!-- spring和MyBatis完美整合，不需要mybatis的配置映射文件 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<!-- 自动扫描mapping.xml文件 -->
		<property name="mapperLocations" value="classpath:com/celloud/backstage/mapper/*.xml" />
		<property name="plugins">
		  <bean class="com.celloud.backstage.page.PageInterceptor"/>
		</property>
	</bean>
	<!-- DAO接口所在包名，Spring会自动查找其下的类 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.celloud.backstage.mapper" />
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" />
	</bean>
	<!-- 文件上传配置 -->
	<bean id="multipartResolver"
		class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="defaultEncoding" value="utf-8"></property>
		<property name="maxUploadSize" value="10485760000"></property>
		<property name="maxInMemorySize" value="40960"></property>
	</bean>
	<bean id="sendCloudEmailUtil" class="com.celloud.message.alimail.AliEmailUtils">
		<property name="apiUser" value="${mail.apiUser}" />
		<property name="apiKey" value="${mail.apiKey}" />
		<property name="username" value="${mail.username}" />
		<property name="emailName" value="${mail.emailName}" />
		<property name="errorTitle" value="${mail.error.title}" />
		<property name="errorsMailTo" value="${mail.error.mailTo}" />
	</bean>
	<bean id="wechatProperties" class="com.celloud.message.wechat.WechatUtils">
		<property name="appId" value="${wechat.appId}" />
		<property name="appSecret" value="${wechat.appSecret}" />
		<property name="loginHtml" value="${wechat.loginHtml}" />
		<property name="oAuth2Url" value="${wechat.oAuth2Url}" />
		<property name="oAuth2TokenUrl" value="${wechat.oAuth2TokenUrl}" />
		<property name="tokenUrl" value="${wechat.tokenUrl}" />
		<property name="templateUrl" value="${wechat.templateUrl}" />
	</bean>
	<!-- 异常处理配置 -->
	<bean id="exceptionHandler" class="com.celloud.backstage.exception.ExceptionHandler" />
	<!-- 拦截器配置 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<mvc:mapping path="/**" />
			<mvc:exclude-mapping path="/js/**" />
			<mvc:exclude-mapping path="/images/**" />
			<mvc:exclude-mapping path="/css/**" />
			<mvc:exclude-mapping path="/plugins/**" />
			<mvc:exclude-mapping path="/resources/**" />
			<mvc:exclude-mapping path="/home/**" />
			<mvc:exclude-mapping path="/home**" />
			<mvc:exclude-mapping path="/feedback/save" />
			<mvc:exclude-mapping path="/**/*.html" />
			<mvc:exclude-mapping path="/login/**" />
			<mvc:exclude-mapping path="/logout/**" />
			<mvc:exclude-mapping path="/addUser/**" />
			<bean class="com.celloud.backstage.interceptor.SecurityInterceptor" />
		</mvc:interceptor>
	</mvc:interceptors>
	<!-- 启动面向切面的自动代理 -->
	<aop:aspectj-autoproxy />
	<!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 拦截器方式配置事物 -->
	<tx:advice id="transactionAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<!-- 事务传递特性 -->
			<tx:method name="add*" propagation="REQUIRED" />
			<tx:method name="create*" propagation="REQUIRED" />
			<tx:method name="insert*" propagation="REQUIRED" />
			<tx:method name="modify*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="find*" propagation="SUPPORTS" />
			<tx:method name="query" propagation="SUPPORTS" />
			<tx:method name="search*" propagation="SUPPORTS" />
			<tx:method name="*" propagation="SUPPORTS" />
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<aop:pointcut id="transactionPointcut"
			expression="execution(* com.celloud.backstage.service.*.*(..))" />
		<aop:advisor pointcut-ref="transactionPointcut"
			advice-ref="transactionAdvice" />
	</aop:config>

	<bean id="mongoServerAddress" class="com.mongodb.ServerAddress">
		<constructor-arg value="${mongo.host}" />
		<constructor-arg value="${mongo.port}" />
	</bean>
	<!-- 如果没有启用mongodb的用户验证，可不使用此配置 -->
	<!-- <bean id="mongoCredential" class="com.mongodb.MongoCredential" factory-method="createCredential"> 
		构造Credential的方法的参数，顺序不能改变 <constructor-arg value="${mongo.username}" /> <constructor-arg 
		value="${mongo.database}" /> <constructor-arg value="${mongo.password}" /> 
		</bean> -->
	<bean id="mongoClient" class="com.mongodb.MongoClient"
		destroy-method="close">
		<constructor-arg ref="mongoServerAddress" />
		<!-- <constructor-arg> <list> <ref bean="mongoCredential" /> </list> </constructor-arg> -->
	</bean>
	<bean id="morphia" class="org.mongodb.morphia.Morphia" />
	<bean id="datastore" class="org.mongodb.morphia.Datastore"
		factory-bean="morphia" factory-method="createDatastore">
		<constructor-arg ref="mongoClient" />
		<constructor-arg value="${mongo.database}" />
	</bean>
	<bean id="springTool" class="com.celloud.backstage.utils.SpringTool"></bean>
	<bean id="messageUtils" class="com.celloud.message.web.MessageUtils"
		scope="prototype"></bean>
</beans>