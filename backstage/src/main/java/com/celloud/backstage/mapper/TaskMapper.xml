<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.celloud.backstage.mapper.TaskMapper">
	<resultMap id="BaseResultMap" type="com.celloud.backstage.model.Task">
		<id column="task_id" property="taskId" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="app_id" property="appId" jdbcType="INTEGER" />
		<result column="data_key" property="dataKey" jdbcType="VARCHAR" />
		<result column="command" property="command" jdbcType="VARCHAR" />
		<result column="period" property="period" jdbcType="INTEGER" />
		<result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
		<result column="start_date" property="startDate" jdbcType="TIMESTAMP" />
		<result column="end_date" property="endDate" jdbcType="TIMESTAMP" />
		<result column="project_id" property="projectId" jdbcType="INTEGER" />
		<result column="delete_date" property="deleteDate" jdbcType="TIMESTAMP" />
		<result column="state" property="state" jdbcType="INTEGER" />
	</resultMap>
	<resultMap id="ResultMapWithBLOBs" type="com.celloud.backstage.model.Task"
		extends="BaseResultMap">
		<result column="params" property="params" jdbcType="LONGVARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		task_id, user_id, app_id, data_key, command, period, create_date, start_date,
		end_date,
		project_id, delete_date, state
	</sql>
	<sql id="Blob_Column_List">
		params
	</sql>
	<select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_task
		where task_id = #{taskId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from tb_task
		where task_id = #{taskId,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.celloud.backstage.model.Task">
		insert into tb_task (task_id, user_id, app_id,
		data_key, command, period,
		create_date, start_date, end_date,
		project_id, delete_date, state,
		params)
		values (#{taskId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
		#{appId,jdbcType=INTEGER},
		#{dataKey,jdbcType=VARCHAR}, #{command,jdbcType=VARCHAR}, #{period,jdbcType=INTEGER},
		#{createDate,jdbcType=TIMESTAMP}, #{startDate,jdbcType=TIMESTAMP},
		#{endDate,jdbcType=TIMESTAMP},
		#{projectId,jdbcType=INTEGER}, #{deleteDate,jdbcType=TIMESTAMP}, #{state,jdbcType=INTEGER},
		#{params,jdbcType=LONGVARCHAR})
	</insert>
	<insert id="insertSelective" parameterType="com.celloud.backstage.model.Task">
		insert into tb_task
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="taskId != null">
				task_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="appId != null">
				app_id,
			</if>
			<if test="dataKey != null">
				data_key,
			</if>
			<if test="command != null">
				command,
			</if>
			<if test="period != null">
				period,
			</if>
			<if test="createDate != null">
				create_date,
			</if>
			<if test="startDate != null">
				start_date,
			</if>
			<if test="endDate != null">
				end_date,
			</if>
			<if test="projectId != null">
				project_id,
			</if>
			<if test="deleteDate != null">
				delete_date,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="params != null">
				params,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="taskId != null">
				#{taskId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="appId != null">
				#{appId,jdbcType=INTEGER},
			</if>
			<if test="dataKey != null">
				#{dataKey,jdbcType=VARCHAR},
			</if>
			<if test="command != null">
				#{command,jdbcType=VARCHAR},
			</if>
			<if test="period != null">
				#{period,jdbcType=INTEGER},
			</if>
			<if test="createDate != null">
				#{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="startDate != null">
				#{startDate,jdbcType=TIMESTAMP},
			</if>
			<if test="endDate != null">
				#{endDate,jdbcType=TIMESTAMP},
			</if>
			<if test="projectId != null">
				#{projectId,jdbcType=INTEGER},
			</if>
			<if test="deleteDate != null">
				#{deleteDate,jdbcType=TIMESTAMP},
			</if>
			<if test="state != null">
				#{state,jdbcType=INTEGER},
			</if>
			<if test="params != null">
				#{params,jdbcType=LONGVARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.celloud.backstage.model.Task">
		update tb_task
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="appId != null">
				app_id = #{appId,jdbcType=INTEGER},
			</if>
			<if test="dataKey != null">
				data_key = #{dataKey,jdbcType=VARCHAR},
			</if>
			<if test="command != null">
				command = #{command,jdbcType=VARCHAR},
			</if>
			<if test="period != null">
				period = #{period,jdbcType=INTEGER},
			</if>
			<if test="createDate != null">
				create_date = #{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="startDate != null">
				start_date = #{startDate,jdbcType=TIMESTAMP},
			</if>
			<if test="endDate != null">
				end_date = #{endDate,jdbcType=TIMESTAMP},
			</if>
			<if test="projectId != null">
				project_id = #{projectId,jdbcType=INTEGER},
			</if>
			<if test="deleteDate != null">
				delete_date = #{deleteDate,jdbcType=TIMESTAMP},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=INTEGER},
			</if>
			<if test="params != null">
				params = #{params,jdbcType=LONGVARCHAR},
			</if>
		</set>
		where task_id = #{taskId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs" parameterType="com.celloud.backstage.model.Task">
		update tb_task
		set user_id = #{userId,jdbcType=INTEGER},
		app_id = #{appId,jdbcType=INTEGER},
		data_key = #{dataKey,jdbcType=VARCHAR},
		command = #{command,jdbcType=VARCHAR},
		period = #{period,jdbcType=INTEGER},
		create_date = #{createDate,jdbcType=TIMESTAMP},
		start_date = #{startDate,jdbcType=TIMESTAMP},
		end_date = #{endDate,jdbcType=TIMESTAMP},
		project_id = #{projectId,jdbcType=INTEGER},
		delete_date = #{deleteDate,jdbcType=TIMESTAMP},
		state = #{state,jdbcType=INTEGER},
		params = #{params,jdbcType=LONGVARCHAR}
		where task_id = #{taskId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.celloud.backstage.model.Task">
		update tb_task
		set user_id = #{userId,jdbcType=INTEGER},
		app_id = #{appId,jdbcType=INTEGER},
		data_key = #{dataKey,jdbcType=VARCHAR},
		command = #{command,jdbcType=VARCHAR},
		period = #{period,jdbcType=INTEGER},
		create_date = #{createDate,jdbcType=TIMESTAMP},
		start_date = #{startDate,jdbcType=TIMESTAMP},
		end_date = #{endDate,jdbcType=TIMESTAMP},
		project_id = #{projectId,jdbcType=INTEGER},
		delete_date = #{deleteDate,jdbcType=TIMESTAMP},
		state = #{state,jdbcType=INTEGER}
		where task_id = #{taskId,jdbcType=INTEGER}
	</update>

	<select id="getRunningTimeByPage" resultType="java.util.HashMap">
		select
		a.app_name, floor(sum(TIMESTAMPDIFF(SECOND, t.start_date, t.end_date)) /
		count(t.task_id)) avgSecond
		from tb_task t, tb_app a
		where t.app_id = a.app_id
		<if test="keyword!=null and keyword!=''">
			and a.app_name like '%${keyword}%'
		</if>
		and t.start_date is not null
		and t.end_date is not null
		group by t.app_id
	</select>

	<select id="getQueuingTime" resultType="java.util.HashMap">
		select 
		sum(TIMESTAMPDIFF(SECOND , create_date ,start_date)) totalSecond,
		floor(sum(TIMESTAMPDIFF(SECOND , create_date ,start_date)) / count(task_id)) avgSecond 
		from tb_task 
		where create_date is not null
		and start_date is not null
	</select>
	
	<select id="getTotalRecordCount" resultType="int">
        select 
	    count(1)
	    from tb_task
	</select>
	
	<select id="getCountByState" parameterType="int" resultType="int">
	    select 
	    count(1) 
	    from tb_task 
	    where state = #{state}
	</select>
	
	<select id="getFailCount" resultType="int">
	    select 
	    count(1) 
	    from tb_task 
	    where start_date is null 
	    or end_date is null
	</select>
	
	<select id="getLastWeekUserLogin" resultType="java.util.HashMap">
    select u.username,count(u.username) log_count from
    (select date_format(date_sub(date_sub(now(),interval 7 day),interval WEEKDAY(date_sub(now(),interval 7 day)) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(date_sub(now(),interval 7 day),interval WEEKDAY(date_sub(now(),interval 7 day)) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date) temp, tb_user u, tb_log l
    where u.user_id = l.user_id and l.log_date &gt;= start_date and l.log_date &lt;= end_date and u.user_id not in (${testAccountIds})
    group by u.username 
    order by log_count desc 
    limit 10
  </select>
  <select id="getLastWeekAppRun" resultType="java.util.HashMap">
    select a.app_name,count(a.app_name) app_count from
      tb_report r,tb_user u,tb_app a,(select date_format(date_sub(date_sub(now(),interval 7 day),interval WEEKDAY(date_sub(now(),interval 7 day)) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(date_sub(now(),interval 7 day),interval WEEKDAY(date_sub(now(),interval 7 day)) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date) temp 
      where r.create_date&gt;=temp.start_date and
      r.create_date&lt;=temp.end_date and 
      r.user_id=u.user_id and
      r.app_id = a.app_id and 
      r.flag = 0 and u.user_id not in(${testAccountIds})
      group by a.app_name
      order by app_count desc
      limit 10
  </select>
  <select id="getLastWeekDataSize" resultType="java.util.HashMap">
    select u.username,sum(f.size) size_sum,count(f.file_id) file_count
      from tb_file f,tb_user u,(select date_format(date_sub(date_sub(now(),interval 7 day),interval WEEKDAY(date_sub(now(),interval 7 day)) day),"%Y-%m-%d 00:00:00") start_date,date_format(date_add(date_sub(date_sub(now(),interval 7 day),interval WEEKDAY(date_sub(now(),interval 7 day)) day),interval 6 day),"%Y-%m-%d 23:59:59") end_date) temp
      where f.create_date&gt;=temp.start_date and 
      f.create_date&lt;=temp.end_date and 
      f.user_id = u.user_id  and u.user_id not in(${testAccountIds})
      group by u.user_id
      order by size_sum desc
      limit 10
  </select>
  <select id="getActiveUserCount" resultType="java.lang.Integer">
  	select count(user_id),date_format(date_sub(now(),interval WEEKDAY(date_sub(now(),interval 7 day)) day),"%Y-%m-%d 00:00:00") end_date
  	from tb_user where user_id not in(${testAccountIds}) 
  	and state = 0
  	and create_date &lt; end_date
  </select>
	

</mapper>