<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.celloud.backstage.mapper.FeedbackMapper" >
  <resultMap id="BaseResultMap" type="com.celloud.backstage.model.Feedback" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="username" property="username" jdbcType="VARCHAR" />
    <result column="email" property="email" jdbcType="VARCHAR" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
    <result column="solve" property="solve" jdbcType="TINYINT" />
    <result column="has_attachment" property="hasAttachment" jdbcType="TINYINT" />
  </resultMap>
  <resultMap id="ResultMapWithBLOBs" type="com.celloud.backstage.model.Feedback" extends="BaseResultMap" >
    <result column="content" property="content" jdbcType="LONGVARCHAR" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, user_id, username, email, title, create_date, solve, has_attachment
  </sql>
  <sql id="Blob_Column_List" >
    content
  </sql>
  <select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from tb_feedback
    where id = #{id,jdbcType=INTEGER}
  </select>
  <select id="selectByPage" resultMap="ResultMapWithBLOBs" >
    select f.*,count(fr.id)>0 isResponse 
	from tb_feedback f LEFT JOIN tb_feedback_reply fr on f.id=fr.feedback_id GROUP BY f.id 
    <choose>
        <when test="sortFiled!=null and sortFiled!=''">
            order by ${sortFiled} ${sortType}
        </when>
        <otherwise>
            order by f.id desc
        </otherwise>
    </choose>
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from tb_feedback
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.celloud.backstage.model.Feedback" >
    insert into tb_feedback (id, user_id, username, 
      email, title, create_date, 
      solve, has_attachment, content
      )
    values (#{id,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER}, #{username,jdbcType=VARCHAR}, 
      #{email,jdbcType=VARCHAR}, #{title,jdbcType=VARCHAR}, #{createDate,jdbcType=TIMESTAMP}, 
      #{solve,jdbcType=TINYINT}, #{hasAttachment,jdbcType=TINYINT}, #{content,jdbcType=LONGVARCHAR}
      )
  </insert>
  <insert id="insertSelective" parameterType="com.celloud.backstage.model.Feedback" >
    insert into tb_feedback
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
      <if test="username != null" >
        username,
      </if>
      <if test="email != null" >
        email,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="createDate != null" >
        create_date,
      </if>
      <if test="solve != null" >
        solve,
      </if>
      <if test="hasAttachment != null" >
        has_attachment,
      </if>
      <if test="content != null" >
        content,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="solve != null" >
        #{solve,jdbcType=TINYINT},
      </if>
      <if test="hasAttachment != null" >
        #{hasAttachment,jdbcType=TINYINT},
      </if>
      <if test="content != null" >
        #{content,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.celloud.backstage.model.Feedback" >
    update tb_feedback
    <set >
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
      <if test="username != null" >
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="email != null" >
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="createDate != null" >
        create_date = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="solve != null" >
        solve = #{solve,jdbcType=TINYINT},
      </if>
      <if test="hasAttachment != null" >
        has_attachment = #{hasAttachment,jdbcType=TINYINT},
      </if>
      <if test="content != null" >
        content = #{content,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.celloud.backstage.model.Feedback" >
    update tb_feedback
    set user_id = #{userId,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      solve = #{solve,jdbcType=TINYINT},
      has_attachment = #{hasAttachment,jdbcType=TINYINT},
      content = #{content,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.celloud.backstage.model.Feedback" >
    update tb_feedback
    set user_id = #{userId,jdbcType=INTEGER},
      username = #{username,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      title = #{title,jdbcType=VARCHAR},
      create_date = #{createDate,jdbcType=TIMESTAMP},
      solve = #{solve,jdbcType=TINYINT},
      has_attachment = #{hasAttachment,jdbcType=TINYINT}
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateAttachState" parameterType="java.lang.Integer">
       update tb_feedback set has_attachment = 
       (select count(*) from tb_feedback_attachment where feedback_id = #{id,jdbcType=INTEGER}) 
       where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>