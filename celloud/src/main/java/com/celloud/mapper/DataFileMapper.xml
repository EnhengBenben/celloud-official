<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.celloud.mapper.DataFileMapper">
	<resultMap id="BaseResultMap" type="com.celloud.model.mysql.DataFile">
		<id column="file_id" property="fileId" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="data_key" property="dataKey" jdbcType="VARCHAR" />
		<result column="file_name" property="fileName" jdbcType="VARCHAR" />
		<result column="strain" property="strain" jdbcType="VARCHAR" />
		<result column="size" property="size" jdbcType="DOUBLE" />
		<result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
		<result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
		<result column="path" property="path" jdbcType="VARCHAR" />
		<result column="state" property="state" jdbcType="INTEGER" />
		<result column="file_format" property="fileFormat" jdbcType="INTEGER" />
		<result column="sample" property="sample" jdbcType="VARCHAR" />
		<result column="another_name" property="anotherName" jdbcType="VARCHAR" />
		<result column="md5" property="md5" jdbcType="VARCHAR" />
		<result column="batch" property="batch" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap id="ResultMapWithBLOBs" type="com.celloud.model.mysql.DataFile"
		extends="BaseResultMap">
		<result column="data_tags" property="dataTags" jdbcType="LONGVARCHAR" />
	</resultMap>
	<resultMap id="ResultMapWithRunState" type="com.celloud.model.mysql.DataFile"
		extends="ResultMapWithBLOBs">
		<result column="isRunning" property="isRunning" jdbcType="INTEGER" />
		<result column="reportNum" property="reportNum" jdbcType="INTEGER" />
	</resultMap>
	<sql id="Base_Column_List">
		file_id, user_id, data_key, file_name, strain, size,
		create_date, update_date,
		path,
		state, file_format, sample,
		another_name, md5, batch
	</sql>
	<sql id="Blob_Column_List">
		data_tags
	</sql>
	<select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_file
		where file_id = #{fileId,jdbcType=INTEGER}
	</select>
	<select id="getDataByAnotherName" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from tb_file
		where user_id = #{userId }
		and another_name = #{anotherName
		}
		and state = #{state}
		and file_id not in (select file_id from
		tb_experiment where user_id =
		#{userId })
		order by create_date desc
	</select>
	<select id="selectByDataKey" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_file
		where data_key = #{dataKey}
	</select>
	<select id="selectByDataKeys" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_file
		where data_key in (${dataKey})
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		tb_file
		where file_id = #{fileId,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.celloud.model.mysql.DataFile">
		insert into tb_file (file_id,
		user_id, data_key,
		file_name, strain, size,
		create_date, update_date,
		path,
		state, file_format, sample,
		another_name, md5, data_tags, batch
		)
		values (#{fileId,jdbcType=INTEGER}, #{userId,jdbcType=INTEGER},
		#{dataKey,jdbcType=VARCHAR},
		#{fileName,jdbcType=VARCHAR},
		#{strain,jdbcType=VARCHAR}, #{size,jdbcType=DOUBLE},
		#{createDate,jdbcType=TIMESTAMP}, #{updateDate,jdbcType=TIMESTAMP},
		#{path,jdbcType=VARCHAR},
		#{state,jdbcType=INTEGER},
		#{fileFormat,jdbcType=INTEGER}, #{sample,jdbcType=VARCHAR},
		#{anotherName,jdbcType=VARCHAR}, #{md5,jdbcType=VARCHAR},
		#{dataTags,jdbcType=LONGVARCHAR}, #{batch,jdbcType=VARCHAR}
		)
	</insert>
	<insert id="insertSelective" parameterType="com.celloud.model.mysql.DataFile">
		insert into tb_file
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="fileId != null">
				file_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="dataKey != null">
				data_key,
			</if>
			<if test="fileName != null">
				file_name,
			</if>
			<if test="strain != null">
				strain,
			</if>
			<if test="size != null">
				size,
			</if>
			<if test="createDate != null">
				create_date,
			</if>
			<if test="updateDate != null">
				update_date,
			</if>
			<if test="path != null">
				path,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="fileFormat != null">
				file_format,
			</if>
			<if test="sample != null">
				sample,
			</if>
			<if test="anotherName != null">
				another_name,
			</if>
			<if test="md5 != null">
				md5,
			</if>
			<if test="dataTags != null">
				data_tags,
			</if>
			<if test="batch != null">
				batch,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="fileId != null">
				#{fileId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="dataKey != null">
				#{dataKey,jdbcType=VARCHAR},
			</if>
			<if test="fileName != null">
				#{fileName,jdbcType=VARCHAR},
			</if>
			<if test="strain != null">
				#{strain,jdbcType=VARCHAR},
			</if>
			<if test="size != null">
				#{size,jdbcType=DOUBLE},
			</if>
			<if test="createDate != null">
				#{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="updateDate != null">
				#{updateDate,jdbcType=TIMESTAMP},
			</if>
			<if test="path != null">
				#{path,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				#{state,jdbcType=INTEGER},
			</if>
			<if test="fileFormat != null">
				#{fileFormat,jdbcType=INTEGER},
			</if>
			<if test="sample != null">
				#{sample,jdbcType=VARCHAR},
			</if>
			<if test="anotherName != null">
				#{anotherName,jdbcType=VARCHAR},
			</if>
			<if test="md5 != null">
				#{md5,jdbcType=VARCHAR},
			</if>
			<if test="dataTags != null">
				#{dataTags,jdbcType=LONGVARCHAR},
			</if>
			<if test="batch != null">
				#{batch,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.celloud.model.mysql.DataFile">
		update tb_file
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="dataKey != null">
				data_key = #{dataKey,jdbcType=VARCHAR},
			</if>
			<if test="fileName != null">
				file_name = #{fileName,jdbcType=VARCHAR},
			</if>
			<if test="strain != null">
				strain = #{strain,jdbcType=VARCHAR},
			</if>
			<if test="size != null">
				size = #{size,jdbcType=DOUBLE},
			</if>
			<if test="createDate != null">
				create_date = #{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="updateDate != null">
				update_date = #{updateDate,jdbcType=TIMESTAMP},
			</if>
			<if test="path != null">
				path = #{path,jdbcType=VARCHAR},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=INTEGER},
			</if>
			<if test="fileFormat != null">
				file_format = #{fileFormat,jdbcType=INTEGER},
			</if>
			<if test="sample != null">
				sample = #{sample,jdbcType=VARCHAR},
			</if>
			<if test="anotherName != null">
				another_name = #{anotherName,jdbcType=VARCHAR},
			</if>
			<if test="md5 != null">
				md5 = #{md5,jdbcType=VARCHAR},
			</if>
			<if test="dataTags != null">
				data_tags = #{dataTags,jdbcType=LONGVARCHAR},
			</if>
			<if test="batch != null">
				batch = #{batch,jdbcType=LONGVARCHAR},
			</if>
		</set>
		where file_id = #{fileId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs" parameterType="com.celloud.model.mysql.DataFile">
		update
		tb_file
		set user_id = #{userId,jdbcType=INTEGER},
		data_key =
		#{dataKey,jdbcType=VARCHAR},
		file_name = #{fileName,jdbcType=VARCHAR},
		strain = #{strain,jdbcType=VARCHAR},
		size = #{size,jdbcType=DOUBLE},
		create_date = #{createDate,jdbcType=TIMESTAMP},
		update_date =
		#{updateDate,jdbcType=TIMESTAMP},
		path = #{path,jdbcType=VARCHAR},
		state = #{state,jdbcType=INTEGER},
		file_format =
		#{fileFormat,jdbcType=INTEGER},
		sample = #{sample,jdbcType=VARCHAR},
		another_name = #{anotherName,jdbcType=VARCHAR},
		md5 =
		#{md5,jdbcType=VARCHAR},
		data_tags = #{dataTags,jdbcType=LONGVARCHAR},
		batch = #{batch,jdbcType=VARCHAR}
		where file_id =
		#{fileId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.celloud.model.mysql.DataFile">
		update tb_file
		set
		user_id = #{userId,jdbcType=INTEGER},
		data_key =
		#{dataKey,jdbcType=VARCHAR},
		file_name = #{fileName,jdbcType=VARCHAR},
		strain = #{strain,jdbcType=VARCHAR},
		size = #{size,jdbcType=DOUBLE},
		create_date = #{createDate,jdbcType=TIMESTAMP},
		update_date =
		#{updateDate,jdbcType=TIMESTAMP},
		path = #{path,jdbcType=VARCHAR},
		state = #{state,jdbcType=INTEGER},
		file_format =
		#{fileFormat,jdbcType=INTEGER},
		sample = #{sample,jdbcType=VARCHAR},
		another_name = #{anotherName,jdbcType=VARCHAR},
		md5 =
		#{md5,jdbcType=VARCHAR},
		batch = #{batch,jdbcType=VARCHAR}
		where file_id
		= #{fileId,jdbcType=INTEGER}
	</update>
	<select id="countData" resultType="java.lang.Integer">
		select count(*) size from
		tb_file where user_id = #{userId } and state =
		#{state }
	</select>
	<select id="countDataByTime" resultType="map">
		select
		date_format(create_date,#{time }) time,count(file_id) num from
		tb_file
		where user_id = #{userId } and state = #{state } group by time
	</select>
	<select id="sumData" resultType="java.lang.Long">
		select sum(size) size from
		tb_file where user_id = #{userId } and state =
		#{state }
	</select>
	<select id="sumDataByTime" resultType="map">
		select
		date_format(create_date,#{time }) time,sum(size) size from tb_file
		where user_id = #{userId } and state = #{state } group by time
	</select>
	<insert id="addDataInfo" useGeneratedKeys="true" keyProperty="fileId"
		parameterType="com.celloud.model.mysql.DataFile">
		insert into tb_file(user_id,file_name,create_date,state
		<if test="md5 != null">
			,md5
		</if>
		) values(#{userId },#{fileName },now(),#{state}
		<if test="md5 != null">
			,#{md5}
		</if>
		)
	</insert>
	<update id="updateDataInfoByFileId" parameterType="com.celloud.model.mysql.DataFile">
		update tb_file
		set data_key=#{dataKey },size=#{size },path=#{path
		},another_name=#{anotherName },file_format=#{fileFormat
		},state=#{state },md5=#{md5 },batch=#{batch } where file_id=#{fileId }
	</update>
	<select id="findAllDataLists" resultMap="ResultMapWithRunState"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		,
		(select count(*) reportNum from tb_report r where r.period = #{period
		} and
		r.flag = #{reportType } and r.state = #{state } and
		r.file_id=f.file_id) reportNum,
		(select count(*) isRunning from
		tb_report r where r.period != #{period } and
		r.flag = #{reportType }
		and r.state = #{state } and
		r.file_id=f.file_id) isRunning
		from tb_file
		f
		where user_id = #{userId } and state = #{state }
		order by
		f.create_date desc,f.file_name asc
	</select>
	<select id="findDataLists" resultMap="ResultMapWithRunState">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		,
		(select count(*) reportNum from tb_report r where r.period = #{period
		} and
		r.flag = #{reportType } and r.state = #{state } and
		r.file_id=f.file_id) reportNum,
		(select count(*) isRunning from
		tb_report r where r.period != #{period } and
		r.flag = #{reportType }
		and r.state = #{state } and
		r.file_id=f.file_id) isRunning
		from tb_file
		f
		where user_id = #{userId } and state = #{state }
		<if test="condition != null">
			and (data_key like '%${condition}%'
			or file_name like
			'%${condition}%'
			or another_name like '%${condition}%'
			or data_tags
			like '%${condition}%'
			or strain like '%${condition}%'
			or sample like
			'%${condition}%'
			or batch like '%${condition}%')
		</if>
		<choose>
			<when test="sort == 0">
				order by f.create_date ${sortDateType},f.file_name
				${sortNameType}
			</when>
			<otherwise>
				order by f.file_name ${sortNameType},f.create_date
				${sortDateType}
			</otherwise>
		</choose>
	</select>
	<select id="findDataListsSortMore" resultMap="ResultMapWithRunState">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		,
		(select count(*) reportNum from tb_report r where r.period = #{period
		} and
		r.flag = #{reportType } and r.state = #{state } and
		r.file_id=f.file_id) reportNum,
		(select count(*) isRunning from
		tb_report r where r.period != #{period } and
		r.flag = #{reportType }
		and r.state = #{state } and
		r.file_id=f.file_id) isRunning
		from tb_file
		f
		where user_id = #{userId } and state = #{state }
		<if test="condition != null">
			and (data_key like '%${condition}%'
			or file_name like
			'%${condition}%'
			or another_name like '%${condition}%'
			or data_tags
			like '%${condition}%'
			or strain like '%${condition}%'
			or sample like
			'%${condition}%'
			or batch like '%${condition}%')
		</if>
		<if test="sort == 0">
			order by f.create_date ${sortDate},f.batch
			${sortBatch},f.file_name
			${sortName}
		</if>
		<if test="sort == 1">
			order by f.batch ${sortBatch},f.create_date
			${sortDate},f.file_name
			${sortName}
		</if>
		<if test="sort == 2">
			order by f.file_name ${sortName},f.batch
			${sortBatch},f.create_date
			${sortDate}
		</if>
	</select>
	<select id="countFileNumByUserId" resultType="map">
		select
		count(f.file_id)as fileNum,(select count(distinct(file_id))from
		tb_report where user_id = f.user_id)as runFileNum from tb_file f where
		f.user_id = ${userId}
	</select>
	<select id="getDatasInProject" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from tb_file where file_id in(select file_id from
		tb_file_project_relat where project_id=#{projectId})
	</select>
	<select id="countDataFileWeek" resultType="map">
		select
		left(date_add(f.create_date ,INTERVAL -weekday(f.create_date )
		day),10)time,count(f.file_id)as fileNum,sum(f.size)as size
		from tb_file
		f where f.state=0 and f.user_id = ${userId}
		group by time order by time
		desc
	</select>
	<select id="findFormatByIds" resultType="map">
		select count(*)
		formatNum,file_format fileFormat from (select file_format
		from tb_file
		where file_id in (${dataIds}) group by file_format) t
	</select>
	<select id="findRunningAppData" resultType="java.lang.Integer">
		select file_id
		from
		tb_report r
		where file_id in (${dataIds}) and app_id=#{appId} and
		period!=#{period} and
		state=#{state}
		group by file_id;
	</select>
	<select id="queryFileSize" resultType="java.lang.String">
		select sum(size) size from
		tb_file where file_id in (${dataIds})
	</select>
	<select id="findDatasById" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_file where file_id in (${dataIds})
	</select>
	<select id="queryDataRunning" resultType="java.lang.Integer">
		select count(*) number
		from tb_report r
		where
		r.flag=#{flag} and r.state=#{state} and
		r.period=#{period} and r.app_id in
		(${appIds});
	</select>
	<select id="queryStrainList" resultType="java.lang.String">
		select distinct strain
		from tb_file where user_id=#{user_id} and strain is
		not null and strain
		!='';
	</select>
	<update id="updateDataByIds">
		update tb_file set
		strain = #{strain},
		update_date =
		#{updateDate},
		sample = #{sample},
		another_name = #{anotherName},
		data_tags = #{dataTags}
		where file_id in (${dataIds})
	</update>
	<select id="getDataByBatchAndFileName" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from tb_file
		where file_name like '${fileName}%'
		and batch = #{batch}
		and state = #{state}
		and user_id= #{userId}
	</select>
	<select id="getBatchList" resultType="java.lang.String">
		select batch from tb_file
		where user_id=#{userId} and state=#{state} group
		by batch
	</select>
	<select id="filterRockyList" resultMap="ResultMapWithRunState"
		parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		,
		(select count(*) reportNum from tb_report r where r.period = #{period
		} and
		r.flag = #{reportType } and r.state = #{state } and
		r.file_id=f.file_id) reportNum,
		(select count(*) isRunning from
		tb_report r where r.period != #{period } and
		r.flag = #{reportType }
		and r.state = #{state } and
		r.file_id=f.file_id) isRunning
		from tb_file
		f
		<where>
			user_id = #{userId } and state = #{state }
			<choose>
				<when test="condition != null">
					and (file_name like '%${condition}%'
					or sample like
					'%${condition}%'
					or batch like '%${condition}%')
				</when>
				<when test="sample != null">
					and sample like '%${sample}%'
				</when>
			</choose>
		</where>
		<choose>
			<when test="sidx == 'createDate'">
				order by create_date ${sord}
			</when>
			<when test="sidx == 'batch'">
				order by batch ${sord}
			</when>
			<when test="sidx == 'filename'">
				order by file_name ${sord}
			</when>
			<when test="sidx == 'filesize'">
				order by size ${sord}
			</when>
			<when test="sidx == 'sample'">
				order by sample ${sord}
			</when>
			<otherwise>
				order by create_date ${sord}
			</otherwise>
		</choose>
	</select>
</mapper>
