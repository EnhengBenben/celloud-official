<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.celloud.mapper.TaskMapper">
	<resultMap id="BaseResultMap" type="com.celloud.model.mysql.Task">
		<id column="task_id" property="taskId" jdbcType="INTEGER" />
		<result column="user_id" property="userId" jdbcType="INTEGER" />
		<result column="app_id" property="appId" jdbcType="INTEGER" />
		<result column="data_key" property="dataKey" jdbcType="VARCHAR" />
		<result column="command" property="command" jdbcType="VARCHAR" />
		<result column="period" property="period" jdbcType="INTEGER" />
		<result column="create_date" property="createDate" jdbcType="TIMESTAMP" />
		<result column="start_date" property="startDate" jdbcType="TIMESTAMP" />
		<result column="end_date" property="endDate" jdbcType="TIMESTAMP" />
		<result column="update_date" property="updateDate" jdbcType="TIMESTAMP" />
		<result column="project_id" property="projectId" jdbcType="INTEGER" />
		<result column="delete_date" property="deleteDate" jdbcType="TIMESTAMP" />
		<result column="state" property="state" jdbcType="INTEGER" />
		<result column="sample_id" property="sampleId" jdbcType="INTEGER" />
		<result column="datalist" property="datalist" jdbcType="VARCHAR" />
		<result column="result" property="result" jdbcType="VARCHAR" />
	</resultMap>
	<resultMap id="ResultMapWithBLOBs" type="com.celloud.model.mysql.Task" extends="BaseResultMap">
		<result column="params" property="params" jdbcType="LONGVARCHAR" />
	</resultMap>
	<resultMap id="ResultMapWithFileName" type="com.celloud.model.mysql.Task" extends="ResultMapWithBLOBs">
		<result column="file_id" property="fileId" jdbcType="INTEGER" />
		<result column="file_name" property="fileName" jdbcType="VARCHAR" />
		<result column="batch" property="batch" jdbcType="VARCHAR" />
		<result column="another_name" property="anotherName" jdbcType="VARCHAR" />
		<result column="sample_name" property="sampleName" jdbcType="VARCHAR" />
		<result column="tag_name" property="tagName" jdbcType="VARCHAR" />
		<result column="app_name" property="appName" jdbcType="VARCHAR" />
	</resultMap>
	<sql id="Base_Column_List">
		task_id, user_id, app_id, data_key, command, period,
		create_date, start_date,
		end_date, update_date,
		project_id, delete_date,
		state, sample_id,
		datalist,result
	</sql>
	<sql id="Blob_Column_List">
		params
	</sql>
	<select id="selectByPrimaryKey" resultMap="ResultMapWithBLOBs" parameterType="java.lang.Integer">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_task
		where task_id = #{taskId,jdbcType=INTEGER}
	</select>
	<delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
		delete from
		tb_task
		where task_id = #{taskId,jdbcType=INTEGER}
	</delete>
	<insert id="insert" parameterType="com.celloud.model.mysql.Task">
		insert into tb_task (task_id,
		user_id, app_id,
		data_key, command, period,
		create_date, start_date,
		end_date, update_date,
		project_id, delete_date, state,
		params,
		sample_id)
		values (#{taskId,jdbcType=INTEGER},
		#{userId,jdbcType=INTEGER},
		#{appId,jdbcType=INTEGER},
		#{dataKey,jdbcType=VARCHAR}, #{command,jdbcType=VARCHAR},
		#{period,jdbcType=INTEGER},
		#{createDate,jdbcType=TIMESTAMP},
		#{startDate,jdbcType=TIMESTAMP},
		#{endDate,jdbcType=TIMESTAMP},
		#{updateDate,jdbcType=TIMESTAMP},
		#{projectId,jdbcType=INTEGER},
		#{deleteDate,jdbcType=TIMESTAMP},
		#{state,jdbcType=INTEGER},
		#{params,jdbcType=LONGVARCHAR}, #{sampleId,jdbcType=INTEGER})
	</insert>
	<insert id="insertSelective" parameterType="com.celloud.model.mysql.Task" useGeneratedKeys="true" keyProperty="taskId">
		insert into tb_task
		<trim prefix="(" suffix=")" suffixOverrides=",">
			<if test="taskId != null">
				task_id,
			</if>
			<if test="userId != null">
				user_id,
			</if>
			<if test="appId != null">
				app_id,
			</if>
			<if test="dataKey != null">
				data_key,
			</if>
			<if test="command != null">
				command,
			</if>
			<if test="period != null">
				period,
			</if>
			<if test="createDate != null">
				create_date,
			</if>
			<if test="startDate != null">
				start_date,
			</if>
			<if test="endDate != null">
				end_date,
			</if>
			<if test="updateDate != null">
				update_date,
			</if>
			<if test="projectId != null">
				project_id,
			</if>
			<if test="deleteDate != null">
				delete_date,
			</if>
			<if test="state != null">
				state,
			</if>
			<if test="params != null">
				params,
			</if>
			<if test="sampleId != null">
				sample_id,
			</if>
			<if test="datalist != null">
				datalist,
			</if>
			<if test="result != null">
				result,
			</if>
		</trim>
		<trim prefix="values (" suffix=")" suffixOverrides=",">
			<if test="taskId != null">
				#{taskId,jdbcType=INTEGER},
			</if>
			<if test="userId != null">
				#{userId,jdbcType=INTEGER},
			</if>
			<if test="appId != null">
				#{appId,jdbcType=INTEGER},
			</if>
			<if test="dataKey != null">
				#{dataKey,jdbcType=VARCHAR},
			</if>
			<if test="command != null">
				#{command,jdbcType=VARCHAR},
			</if>
			<if test="period != null">
				#{period,jdbcType=INTEGER},
			</if>
			<if test="createDate != null">
				#{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="startDate != null">
				#{startDate,jdbcType=TIMESTAMP},
			</if>
			<if test="endDate != null">
				#{endDate,jdbcType=TIMESTAMP},
			</if>
			<if test="updateDate != null">
				#{updateDate,jdbcType=TIMESTAMP},
			</if>
			<if test="projectId != null">
				#{projectId,jdbcType=INTEGER},
			</if>
			<if test="deleteDate != null">
				#{deleteDate,jdbcType=TIMESTAMP},
			</if>
			<if test="state != null">
				#{state,jdbcType=INTEGER},
			</if>
			<if test="params != null">
				#{params,jdbcType=LONGVARCHAR},
			</if>
			<if test="sampleId != null">
				#{sampleId,jdbcType=INTEGER},
			</if>
			<if test="datalist != null">
				#{datalist,jdbcType=VARCHAR},
			</if>
			<if test="result != null">
				#{result,jdbcType=VARCHAR},
			</if>
		</trim>
	</insert>
	<update id="updateByPrimaryKeySelective" parameterType="com.celloud.model.mysql.Task">
		update tb_task
		<set>
			<if test="userId != null">
				user_id = #{userId,jdbcType=INTEGER},
			</if>
			<if test="appId != null">
				app_id = #{appId,jdbcType=INTEGER},
			</if>
			<if test="dataKey != null">
				data_key = #{dataKey,jdbcType=VARCHAR},
			</if>
			<if test="command != null">
				command = #{command,jdbcType=VARCHAR},
			</if>
			<if test="period != null">
				period = #{period,jdbcType=INTEGER},
			</if>
			<if test="createDate != null">
				create_date = #{createDate,jdbcType=TIMESTAMP},
			</if>
			<if test="startDate != null">
				start_date = #{startDate,jdbcType=TIMESTAMP},
			</if>
			<if test="endDate != null">
				end_date = #{endDate,jdbcType=TIMESTAMP},
			</if>
			<if test="updateDate != null">
				update_date = #{updateDate,jdbcType=TIMESTAMP},
			</if>
			<if test="projectId != null">
				project_id = #{projectId,jdbcType=INTEGER},
			</if>
			<if test="deleteDate != null">
				delete_date = #{deleteDate,jdbcType=TIMESTAMP},
			</if>
			<if test="state != null">
				state = #{state,jdbcType=INTEGER},
			</if>
			<if test="params != null">
				params = #{params,jdbcType=LONGVARCHAR},
			</if>
			<if test="sampleId != null">
				sample_id = #{sampleId,jdbcType=INTEGER},
			</if>
			<if test="datalist != null">
				datalist = #{datalist,jdbcType=VARCHAR},
			</if>
			<if test="result != null">
				result = #{result,jdbcType=VARCHAR},
			</if>
		</set>
		where task_id = #{taskId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKeyWithBLOBs" parameterType="com.celloud.model.mysql.Task">
		update
		tb_task
		set user_id = #{userId,jdbcType=INTEGER},
		app_id =
		#{appId,jdbcType=INTEGER},
		data_key = #{dataKey,jdbcType=VARCHAR},
		command =
		#{command,jdbcType=VARCHAR},
		period =
		#{period,jdbcType=INTEGER},
		create_date =
		#{createDate,jdbcType=TIMESTAMP},
		start_date =
		#{startDate,jdbcType=TIMESTAMP},
		end_date =
		#{endDate,jdbcType=TIMESTAMP},
		project_id =
		#{projectId,jdbcType=INTEGER},
		delete_date =
		#{deleteDate,jdbcType=TIMESTAMP},
		update_date =
		#{updateDate,jdbcType=TIMESTAMP},
		state = #{state,jdbcType=INTEGER},
		params =
		#{params,jdbcType=LONGVARCHAR},
		sample_id =
		#{sampleId,jdbcType=INTEGER}
		where task_id = #{taskId,jdbcType=INTEGER}
	</update>
	<update id="deleteTask" parameterType="com.celloud.model.mysql.Task">
		update tb_task
		set state =
		#{state,jdbcType=INTEGER},
		delete_date =
		#{deleteDate,jdbcType=TIMESTAMP}
		where project_id =
		#{projectId,jdbcType=INTEGER}
	</update>
	<update id="updateByPrimaryKey" parameterType="com.celloud.model.mysql.Task">
		update tb_task
		set
		user_id = #{userId,jdbcType=INTEGER},
		app_id =
		#{appId,jdbcType=INTEGER},
		data_key = #{dataKey,jdbcType=VARCHAR},
		command =
		#{command,jdbcType=VARCHAR},
		period =
		#{period,jdbcType=INTEGER},
		create_date =
		#{createDate,jdbcType=TIMESTAMP},
		start_date =
		#{startDate,jdbcType=TIMESTAMP},
		end_date =
		#{endDate,jdbcType=TIMESTAMP},
		update_date =
		#{updateDate,jdbcType=TIMESTAMP},
		project_id =
		#{projectId,jdbcType=INTEGER},
		delete_date =
		#{deleteDate,jdbcType=TIMESTAMP},
		state = #{state,jdbcType=INTEGER},
		params =
		#{params,jdbcType=LONGVARCHAR},
		sample_id =
		#{sampleId,jdbcType=INTEGER}
		where task_id = #{taskId,jdbcType=INTEGER}
	</update>
	<select id="findFirstTaskByAppId" resultMap="ResultMapWithBLOBs">
		select
		<include refid="Base_Column_List" />
		,
		<include refid="Blob_Column_List" />
		from tb_task WHERE period=#{period} and app_id=#{appId} and
		state=#{state} ORDER BY task_id LIMIT 1
	</select>
	<select id="findAppRunningNum" resultType="java.lang.Integer">
		select count(command)
		runNum from tb_task where period=#{period} and
		app_id=#{appId} and
		state=#{state}
	</select>
	<select id="findAppsRunningNum" resultType="java.lang.Integer">
		select count(command) runNum from tb_task where period=#{period}
		and
		app_id in(
		<foreach item="appId" collection="appIds" separator=",">
			#{appId,jdbcType=INTEGER}
		</foreach>
		)
		and state=#{state}
	</select>
	<select id="findTaskInfoByProId" resultType="map" parameterType="java.lang.Integer">
		select t.app_id appId,t.user_id userId,t.params,a.title,a.method,a.app_name
		appName,u.username,u.email
		from tb_task t left join tb_app a on
		t.app_id=a.app_id left join tb_user u
		on t.user_id=u.user_id
		where
		project_id=#{projectId} group by project_id
	</select>
	<update id="updatePeriodByProAndData">
		update tb_task
		<set>
			<if test="period != null">
				period = #{period,jdbcType=INTEGER},
			</if>
			<if test="startDate != null">
				start_date = #{startDate,jdbcType=TIMESTAMP},
			</if>
			<if test="endDate != null">
				end_date = #{endDate,jdbcType=TIMESTAMP},
			</if>
			<if test="updateDate != null">
				update_date = #{updateDate,jdbcType=TIMESTAMP},
			</if>
		</set>
		where project_id = #{projectId} and data_key = #{dataKey}
	</update>
	<select id="findTaskByProData" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from tb_task WHERE project_id = #{projectId} and data_key = #{dataKey}
	</select>
	<select id="findTasksByUser" resultMap="ResultMapWithFileName">
		select
		f.file_name,f.file_id,f.batch,f.another_name,s.sample_name,t.* from
		(select * from tb_task where
		(task_id in (select max(task_id) from
		tb_task where
		state=#{state} and
		user_id=#{userId} and (app_id=#{appId}
		or period!=2) group by
		data_key))
		or (data_key is null and
		state=#{state} and user_id=#{userId} and
		app_id=#{appId})
		)t
		left join
		tb_file f
		on
		f.data_key=t.data_key
		left join tb_sample s
		on
		s.sample_id=t.sample_id
		order by t.update_date desc,f.batch asc
	</select>
	<select id="findRockyTasks" resultMap="ResultMapWithFileName">
		select f.file_name,f.file_id,f.batch,f.another_name,s.sample_name,t.*
		from
		(select * from tb_task where
			(task_id in (select max(task_id) from
			tb_task where state=#{state} and
			user_id=#{userId} and
			app_id=#{appId}
			group by data_key))
			or (data_key is null and state=#{state} and
			user_id=#{userId} and
			app_id=#{appId})
		)t
		left join tb_file f on f.data_key=t.data_key
		left join tb_sample s on s.sample_id=t.sample_id
		<where>
			<choose>
				<when test="condition != null">
					(f.file_name like concat('%',#{condition},'%')
					or s.sample_name like concat('%',#{condition},'%')
					or f.batch like concat('%',#{condition},'%'))
				</when>
				<when test="sample != null">
					s.sample_name like concat('%',#{sample},'%')
				</when>
			</choose>
			<if test="periods != null and periods.size() > 0">
				and t.period in
				<foreach collection="periods" open="(" close=")" separator="," item="period">
					#{period}
				</foreach>
			</if>
			<if test="batches != null and batches.size() > 0">
				and f.batch in
				<foreach collection="batches" open="(" close=")" separator="," item="batch">
					#{batch}
				</foreach>
			</if>
			<if test="beginDate != null">
				and t.update_date &gt;= #{beginDate}
			</if>
			<if test="endDate != null">
				and t.update_date &lt;= #{endDate}
			</if>
		</where>
		<choose>
			<when test="sidx == 'updateDate'">
				order by update_date ${sord}
			</when>
			<when test="sidx == 'batch'">
				order by f.batch ${sord}
			</when>
			<when test="sidx == 'filename'">
				order by f.file_name ${sord}
			</when>
			<when test="sidx == 'sample'">
				order by s.sample_name ${sord}
			</when>
			<otherwise>
				order by t.update_date ${sord}
			</otherwise>
		</choose>
	</select>
	<select id="findTasksByBatch" resultMap="ResultMapWithFileName">
		select
		f.file_name,f.file_id,f.batch,s.sample_name,t.* from
		(select * from
		tb_task where task_id in (select max(task_id) from tb_task
		where
		state=#{state}
		and user_id=#{userId} and app_id=#{appId} group
		by
		data_key))t
		left join tb_file f
		on f.data_key=t.data_key
		left join
		tb_sample s
		on s.sample_id=t.sample_id
		where f.user_id=#{userId} and
		f.state=#{state} and
		f.batch=#{batch} and
		t.period=#{period}
		order by
		t.update_date desc
	</select>
	<select id="findTasksByUserCondition" resultMap="ResultMapWithFileName" flushCache="true">
		select f.file_name,f.file_id,f.batch,f.another_name,s.sample_name,t.*
		from
		(select * from tb_task where
		(task_id in (select max(task_id) from
		tb_task where state=#{state} and
		user_id=#{userId} and
		(app_id=#{appId}
		or period!=2) group by
		data_key))
		or (data_key is null and
		state=#{state} and user_id=#{userId} and
		app_id=#{appId})
		)t
		left join
		tb_file f
		on f.data_key=t.data_key
		left join tb_sample s
		on
		s.sample_id=t.sample_id
		<where>
            <if test="condition != null">
	            and (file_name like '%${condition}%' or f.batch like
	            '%${condition}%' or
	            s.sample_name like '%${condition}%')
	        </if>
	        <if test="batch != null and batch != ''">
	            and f.batch in (${batch})
	        </if>
	        <if test="period != null and period != ''">
	            and t.period in (${period})
	        </if>
	        <if test="beginDate != null and beginDate != ''">
	            and t.update_date &gt;= '${beginDate} 00:00:00'
	        </if>
	        <if test="endDate != null and endDate != ''">
	            and t.update_date &lt;= '${endDate} 23:59:59'
	        </if>
	        <if test="sampleName != null and sampleName != ''">
	            and s.sample_name like '%${sampleName}%'
	        </if>
        </where>
		<if test="sort == 0">
			order by t.update_date ${sortDate},f.batch
			${sortBatch},f.file_name
			${sortName},t.period ${sortPeriod}
		</if>
		<if test="sort == 1">
			order by f.batch ${sortBatch},t.update_date
			${sortDate},f.file_name
			${sortName},t.period ${sortPeriod}
		</if>
		<if test="sort == 2">
			order by f.file_name ${sortName},t.update_date
			${sortDate},f.batch
			${sortBatch},t.period ${sortPeriod}
		</if>
		<if test="sort == 3">
			order by t.period ${sortPeriod},t.update_date
			${sortDate},f.batch
			${sortBatch},f.file_name ${sortName}
		</if>
	</select>
	<select id="findTaskByParamsAndPeriod" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from tb_task WHERE user_id=#{userId} and state=#{state} and period =
		#{period} and params=#{params}
	</select>
	<select id="findTaskByDataKeyAndApp" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from tb_task WHERE data_key = #{dataKey} and state=#{state} and
		app_id=#{appId}
		and period = #{period} and project_id is null
	</select>
	<select id="findTaskDataAppPro" resultMap="BaseResultMap">
		select
		<include refid="Base_Column_List" />
		from tb_task WHERE data_key = #{dataKey} and state=#{state} and
		app_id=#{appId}
		and project_id=#{projectId}
	</select>
	<select id="findTaskPeriodNum" resultType="map">
		select count(t.period)
		periodNum,t.period from
		(select * from tb_task
		where state=#{state} and
		user_id=#{userId}
		and (app_id=#{appId} or
		period!=2) group by data_key)t
		left join
		tb_file f
		on f.data_key=t.data_key
		where f.user_id=#{userId} and
		f.state=#{state}
		group by t.period
	</select>
	<select id="findTaskAndDataInfo" resultMap="ResultMapWithFileName">
	    select f.file_id,f.file_name,f.data_key,f.batch,s.sample_name,t.task_id,t.app_id,t.project_id,t.period,t.update_date,tag.tag_name,a.app_name
		from tb_task t 
		left join tb_file f on t.data_key=f.data_key
		left join tb_sample s on t.sample_id = s.sample_id
		left join tb_file_tag_relat ftr on ftr.file_id=f.file_id
		left join tb_tag tag on tag.tag_id = ftr.tag_id
		left join tb_app a on t.app_id = a.app_id
		where t.user_id=#{userId} and t.state=#{state} and f.state=#{state} 
        <if test="condition != null and condition!=''">
            and (f.file_name like concat('%',#{condition},'%')
            or s.sample_name like concat('%',#{condition},'%'))
        </if>
        <if test="period != null">
            and t.period=#{period}
        </if>
        <if test="tagId != null and tagId!=''">
            and tag.tag_id=#{tagId}
        </if>
        <if test="batch != null and batch!=''">
            and f.batch=#{batch}
        </if>
        <if test="beginDate != null and beginDate !=''">
            and t.update_date&gt;=#{beginDate}
        </if>
        <if test="endDate != null and endDate !=''">
            and t.update_date&lt;=#{endDate}
        </if>
        order by t.update_date ${sord}
	</select>
</mapper>